module Test_Klinkenberg_module

#include "petsc/finclude/petscsys.h"
  use petscsys
  use pFUnit_mod
  use Klinkenberg_module

  implicit none

  public :: Test_Klinkenberg

  interface Test_Klinkenberg
     module procedure newTest_Klinkenberg
  end interface Test_Klinkenberg

  @TestCase
  type, extends(TestCase) :: Test_Klinkenberg
     procedure(runMethod), pointer :: userMethod => null()
     class(klinkenberg_type), pointer :: klink_1
     class(klinkenberg_type), pointer :: klink_2
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: runMethod
  end type Test_Klinkenberg

contains

! ************************************************************************** !

  function newTest_Klinkenberg(name, userMethod) result(test)

    implicit none

    character(len=*), intent(in) :: name
    procedure(runMethod) :: userMethod

    type(Test_Klinkenberg) :: test

    call test%setName(name)
    test%userMethod => userMethod

  end function newTest_Klinkenberg

! ************************************************************************** !

  subroutine setUp(this)
    implicit none
    class (Test_Klinkenberg), intent(inout) :: this

    this%klink_1 => KlinkenbergCreate()
    this%klink_1%a = -2.340000d-01
    this%klink_1%b = 5.230000d-01

    this%klink_2 => KlinkenbergCreate()
    this%klink_2%a = -3.410000d-01
    this%klink_2%b = 2.710000d-01

  end subroutine setUp

! ************************************************************************** !

  subroutine tearDown(this)
    implicit none
    class (Test_Klinkenberg), intent(inout) :: this

    call KlinkenbergDestroy(this%klink_1)
    call KlinkenbergDestroy(this%klink_2)

  end subroutine tearDown

! ************************************************************************** !

  subroutine runMethod(this)
    implicit none
    class (Test_Klinkenberg), intent(inout) :: this
    call this%userMethod()
  end subroutine runMethod

! ************************************************************************** !

  @Test
  subroutine testKlinkenberg(this)
    !
    ! verify that the Klinkenberg module is calculating the gas permeability
    ! given the liquid permeability and the gas pressure
    !
    use PFLOTRAN_Constants_module, only : MAXSTRINGLENGTH

    use, intrinsic :: iso_fortran_env, only: error_unit
    implicit none

    class (Test_Klinkenberg), intent(inout) :: this

    PetscReal :: liquid_permeability(3) ! [m2]
    PetscReal :: gas_pressure           ! [Pa]
    PetscReal :: gas_perm(3)            ! [m2]
    PetscReal :: liq_perm(3)            ! [m2]
    PetscReal :: correct_gas_perm(3)    ! [m2]
    PetscReal :: liq_perm_x             ! [m2]
    PetscReal :: liq_perm_y             ! [m2]
    PetscReal :: liq_perm_z             ! [m2]
    PetscReal :: correct_gp_x           ! [Pa]
    PetscReal :: correct_gp_y           ! [Pa]
    PetscReal :: correct_gp_z           ! [Pa]
    PetscReal, parameter :: tolerance = 1.d-12
    character(len=*), parameter :: file_name_in = 'wipp_input_files/klinkenburg.in'
    character(len=*), parameter :: file_name_out = 'wipp_input_files/klinkenburg.out'
    PetscInt :: rc_in, rc_out, fu_in, fu_out
    PetscInt :: count
    PetscInt :: values(8)
    character(8) :: date
    character(5) :: zone
    character(10) :: time

    open(action='read', file=file_name_in, iostat=rc_in, newunit=fu_in)
    open(action='write', file=file_name_out, iostat=rc_out, newunit=fu_out)
    count = 0

    if (rc_in /= 0) then
        write (error_unit, '(3a, i0)') 'Reading file "', trim(file_name_in), '" failed: ', rc_in
        stop
    end if

    call date_and_time(DATE=date,ZONE=zone,TIME=time,VALUES=values)
    write(fu_out,*) date(1:4),'/',date(5:6),'/',date(7:8),' ',time(1:2),':',time(3:4),' ',zone(1:3),':',zone(4:5),'UTC'
    write(fu_out,*)

    read(fu_in, *) ! skip header line
    do
        read (fu_in, *, iostat=rc_in) liq_perm_x,liq_perm_y,liq_perm_z,gas_pressure,correct_gp_x, correct_gp_y,correct_gp_z 
        if (rc_in /= 0) exit  
        count = count + 1

        write(fu_out,'(a,I2,a)') '||-----------TEST-#', count, '-------------------------------------||'
        write(fu_out,*)

        liq_perm(1) = liq_perm_x
        liq_perm(2) = liq_perm_y
        liq_perm(3) = liq_perm_z
        liquid_permeability(:) = liq_perm

        correct_gas_perm(1) = correct_gp_x
        correct_gas_perm(2) = correct_gp_y
        correct_gas_perm(3) = correct_gp_z

        write(fu_out,*) '[in]  liquid permeability (x,y,z) [m2]:'
        write(fu_out,'(a,d17.10,a,d17.10,a,d17.10,a)') ' (',liq_perm_x,',',liq_perm_y,',',liq_perm_z,')'
        write(fu_out,*) '[in]  gas pressure [Pa]:'
        write(fu_out,'(d17.10)') gas_pressure

        !call this%klink_2%Test(liquid_permeability,gas_pressure)
        gas_perm = this%klink_2%Evaluate(liquid_permeability,gas_pressure)

        write(fu_out,*) '[out] gas permeability (x,y,z) [m2]:'
        write(fu_out,'(a,d17.10,a,d17.10,a,d17.10,a)') ' (',gas_perm(1),',',gas_perm(2),',',gas_perm(3),')'

        @assertEqual(correct_gas_perm(1), gas_perm(1), dabs(correct_gas_perm(1))*tolerance)
        @assertEqual(correct_gas_perm(2), gas_perm(2), dabs(correct_gas_perm(2))*tolerance)
        @assertEqual(correct_gas_perm(3), gas_perm(3), dabs(correct_gas_perm(3))*tolerance)
        write(fu_out,*)        
    end do

    close(fu_in)
    close(fu_out)

  end subroutine testKlinkenberg

! ************************************************************************** !


end module Test_Klinkenberg_module

